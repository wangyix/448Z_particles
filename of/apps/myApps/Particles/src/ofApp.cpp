#include "ofApp.h"
#include <assert.h>
#include <algorithm>


static const float wav[WAV_SAMPLES] = { 0.000397, 0.002014, 0.006073, 0.011749, 0.018616, 0.026337, 0.032806, 0.038483, 0.041718, 0.044159, 0.044952, 0.044952, 0.044556, 0.043732, 0.043335, 0.042542, 0.040894, 0.038086, 0.034027, 0.029572, 0.025116, 0.021454, 0.019440, 0.018219, 0.016205, 0.015381, 0.015381, 0.015381, 0.014160, 0.011322, 0.006866, 0.002808, -0.000793, -0.002808, -0.002808, -0.000793, 0.000397, 0.000000, -0.000793, -0.002014, -0.002808, -0.002014, 0.000397, 0.005646, 0.010925, 0.010925, 0.004456, -0.008087, -0.024689, -0.040497, -0.051453, -0.056702, -0.058319, -0.059540, -0.062775, -0.068054, -0.072510, -0.074951, -0.073730, -0.068878, -0.059143, -0.044952, -0.030365, -0.018219, -0.010529, -0.007263, -0.008087, -0.010101, -0.011749, -0.011749, -0.008911, -0.004456, 0.000397, 0.005249, 0.010529, 0.016998, 0.021851, 0.025909, 0.028748, 0.029572, 0.029968, 0.031982, 0.034027, 0.033203, 0.030365, 0.028748, 0.028748, 0.028748, 0.028351, 0.027954, 0.026337, 0.021454, 0.014160, 0.008087, 0.004028, 0.000000, -0.006073, -0.013367, -0.021454, -0.029968, -0.037659, -0.044952, -0.049408, -0.050629, -0.048187, -0.043335, -0.036865, -0.028748, -0.022278, -0.017822, -0.013367, -0.010925, -0.011749, -0.014160, -0.015381, -0.014557, -0.011322, -0.006470, -0.002411, 0.000000, 0.001190, 0.003632, 0.009308, 0.016602, 0.023071, 0.025909, 0.022278, 0.012543, 0.002014, -0.004028, -0.000793, 0.009705, 0.022278, 0.031586, 0.035248, 0.031586, 0.022675, 0.013367, 0.008087, 0.007263, 0.008484, 0.010529, 0.011322, 0.009308, 0.005249, 0.000793, -0.002014, -0.002014, 0.000793, 0.008087, 0.018219, 0.027130, 0.029968, 0.026337, 0.017395, 0.004456, -0.011322, -0.027527, -0.037659, -0.040100, -0.035248, -0.025513, -0.015778, -0.009308, -0.006866, -0.007690, -0.009705, -0.010925, -0.011322, -0.010101, -0.007690, -0.005646, -0.004852, -0.005249, -0.004456, 0.000397, 0.008087, 0.015381, 0.021851, 0.025116, 0.025513, 0.025116, 0.023895, 0.019836, 0.012543, 0.002411, -0.007263, -0.015778, -0.022278, -0.025116, -0.024292, -0.020660, -0.015381, -0.009705, -0.003632, 0.000397, 0.001617, 0.001190, 0.000397, 0.000000, 0.002014, 0.005249, 0.006073, 0.003235, -0.001190, -0.004852, -0.005646, -0.005249, -0.003235, 0.001190, 0.007690, 0.014557, 0.020660, 0.022278, 0.019440, 0.013367, 0.007263, 0.003632, 0.001190, -0.000793, -0.002411, -0.002014, 0.001190, 0.005249, 0.009705, 0.015381, 0.021454, 0.024292, 0.023071, 0.019440, 0.014557, 0.008087, -0.001190, -0.010529, -0.017395, -0.020233, -0.018616, -0.014160, -0.010925, -0.009705, -0.010529, -0.010101, -0.006470, -0.001617, 0.001190, 0.002808, 0.004028, 0.005646, 0.006866, 0.007263, 0.008087, 0.009308, 0.011322, 0.014160, 0.015381, 0.013763, 0.011749, 0.012146, 0.013763, 0.014557, 0.014160, 0.014160, 0.016205, 0.018219, 0.018616, 0.016205, 0.010925, 0.004028, -0.002808, -0.008087, -0.010925, -0.012146, -0.012543, -0.011749, -0.009308, -0.007690, -0.008484, -0.012146, -0.014984, -0.014984, -0.011322, -0.006073, -0.004028, -0.006866, -0.012543, -0.017822, -0.020660, -0.019440, -0.016205, -0.012939, -0.009705, -0.003235, 0.004028, 0.010925, 0.023499, 0.049835, 0.097626, 0.169769, 0.278748, 0.455811, 0.658417, 0.743500, 0.610992, 0.275909, -0.170166, -0.597229, -0.892609, -1.000000, -0.927460, -0.728912, -0.478119, -0.242279, -0.067657, 0.027954, 0.051025, 0.026337, -0.017395, -0.056702, -0.074951, -0.066833, -0.034821, 0.012543, 0.065216, 0.113434, 0.148682, 0.166931, 0.168945, 0.158417, 0.140167, 0.119110, 0.099243, 0.082642, 0.072113, 0.066437, 0.064423, 0.065216, 0.067261, 0.070496, 0.072510, 0.070892, 0.064423, 0.055084, 0.044159, 0.031982, 0.020660, 0.011322, 0.002411, -0.006866, -0.015381, -0.022278, -0.025513, -0.024689, -0.021057, -0.017395, -0.015778, -0.018219, -0.023499, -0.029968, -0.035645, -0.038879, -0.037262, -0.031189, -0.022278, -0.012543, -0.003632, 0.003235, 0.007690, 0.008087, 0.005249, 0.000793, -0.005249, -0.012543, -0.018219, -0.019836, -0.015778, -0.006470, 0.004028, 0.014160, 0.021454, 0.024292, 0.023071, 0.018616, 0.011322, 0.003235, -0.002411, -0.004456, -0.002014, 0.002808, 0.008484, 0.011749, 0.010925, 0.006470, -0.000397, -0.006866, -0.008484, -0.006866, -0.004028, -0.000397, 0.003235, 0.006073, 0.008087, 0.010101, 0.011749, 0.011749, 0.010101, 0.008484, 0.007263, 0.006470, 0.007263, 0.008911, 0.010925, 0.013367, 0.015381, 0.014557, 0.011322, 0.007690, 0.007263, 0.010101, 0.014160, 0.016602, 0.016602, 0.014160, 0.011322, 0.006866, 0.001617, -0.004028, -0.009308, -0.012543, -0.013367, -0.012939, -0.011749, -0.011749, -0.014160, -0.018616, -0.023895, -0.028351, -0.031189, -0.031982, -0.031189, -0.029572, -0.027954, -0.025513, -0.021454, -0.014984, -0.008911, -0.004852, -0.003632, -0.004456, -0.007690, -0.011749, -0.016998, -0.022675, -0.025513, -0.023071, -0.016602, -0.009308, -0.002808, 0.001617, 0.003235, 0.002014, 0.001617, 0.004456, 0.011322, 0.019836, 0.029968, 0.039276, 0.046173, 0.049011, 0.048615, 0.046173, 0.042938, 0.039703, 0.037262, 0.036438, 0.034821, 0.031982, 0.027130, 0.018219, 0.005249, -0.009308, -0.022675, -0.032410, -0.038086, -0.041321, -0.040894, -0.038879, -0.036041, -0.031586, -0.025513, -0.017395, -0.008911, -0.002014, 0.000000, -0.003632, -0.008911, -0.014557, -0.021057, -0.025116, -0.025513, -0.022675, -0.017395, -0.011322, -0.004852, 0.001617, 0.007690, 0.011322, 0.011322, 0.009308, 0.007263, 0.004852, 0.004456, 0.004852, 0.004028, 0.001617, -0.002014, -0.006866, -0.014160, -0.021057, -0.023071, -0.019440, -0.012146, -0.004456, 0.001617, 0.002808, -0.001617, -0.010925, -0.023071, -0.032806, -0.038086, -0.036438, -0.026733, -0.009308, 0.009705, 0.022278, 0.025513, 0.020660, 0.010529, -0.001190, -0.011322, -0.015778, -0.015778, -0.010925, -0.002411, 0.006073, 0.010101, 0.010101, 0.006866, 0.002808, 0.000000, -0.000397, 0.002411, 0.007263, 0.012939, 0.018219, 0.021057, 0.021057, 0.016998, 0.009308, 0.001617, -0.002808, -0.002808, 0.003235, 0.012543, 0.021057, 0.026337, 0.027527, 0.023895, 0.019043, 0.015381, 0.015778, 0.019043, 0.021851, 0.023499, 0.023499, 0.021454, 0.016602, 0.011749, 0.006073, 0.000397, -0.005646, -0.012543, -0.019836, -0.026733, -0.031189, -0.033203, -0.033630, -0.031982, -0.027954, -0.024689, -0.022278, -0.020233, -0.018616, -0.016998, -0.016205, -0.018219, -0.021454, -0.025513, -0.029968, -0.033203, -0.034027, -0.032806, -0.028748, -0.022278, -0.014557, -0.004852, 0.004852, 0.014160, 0.021454, 0.026337, 0.030365, 0.031982, 0.030792, 0.028748, 0.024689, 0.020233, 0.018616, 0.019440, 0.021057, 0.021057, 0.018616, 0.014160, 0.009308, 0.004456, 0.002411, 0.003632, 0.008087, 0.013367, 0.015381, 0.013763, 0.010529, 0.004028, -0.003632, -0.011322, -0.016205, -0.017395, -0.015381, -0.012146, -0.008911, -0.004852, -0.000793, 0.002808, 0.005249, 0.004456, 0.001190, -0.001190, -0.002808, -0.003632, -0.004456, -0.003235, 0.002014, 0.009308, 0.015381, 0.018219, 0.019043, 0.019043, 0.018616, 0.016602, 0.012543, 0.009308, 0.006866, 0.006470, 0.009308, 0.015381, 0.023499, 0.030365, 0.034821, 0.036438, 0.034027, 0.025116, 0.011322, -0.004028, -0.016602, -0.024689, -0.027527, -0.027527, -0.025513, -0.021454, -0.016602, -0.013763, -0.013367, -0.014984, -0.015778, -0.014160, -0.009308, -0.003632, -0.000397, 0.000793, 0.000793, -0.000397, -0.001190, 0.000000, 0.005249, 0.012543, 0.018219, 0.021057, 0.023499, 0.027130, 0.032806, 0.036438, 0.034821, 0.027527, 0.017395, 0.007690, 0.002808, 0.004852, 0.011749, 0.019043, 0.023895, 0.024689, 0.018219, 0.007690, -0.003632, -0.013763, -0.022675, -0.028351, -0.029968, -0.028748, -0.025116, -0.019836, -0.015381, -0.013367, -0.013763, -0.016602, -0.020660, -0.023895, -0.023499, -0.021057, -0.016998, -0.014557, -0.014557, -0.017395, -0.021057, -0.022675, -0.022278, -0.019836, -0.015381, -0.009308, -0.004028, 0.001190, 0.005646, 0.008087, 0.008911, 0.010101, 0.013367, 0.019836, 0.027954, 0.034424, 0.036041, 0.032806, 0.025909, 0.017822, 0.009308, 0.001190, -0.005646, -0.011322, -0.015778, -0.019043, -0.020233, -0.017822, -0.012543, -0.006866, -0.003235, -0.002411, -0.006470, -0.014160, -0.023499, -0.029144, -0.029968, -0.025909, -0.018616, -0.009308, 0.001617, 0.013367, 0.024689, 0.034424, 0.042114, 0.048187, 0.052246, 0.054688, 0.056702, 0.058319, 0.056702, 0.050232, 0.039276, 0.026733, 0.014984, 0.006073, 0.000000, -0.003632, -0.006073, -0.007263, -0.008087, -0.008911, -0.010529, -0.012543, -0.014160, -0.014557, -0.012939, -0.011322, -0.011322, -0.012939, -0.016998, -0.021454, -0.024689, -0.025909, -0.025513, -0.023895, -0.022675, -0.022278, -0.021454, -0.020660, -0.018219, -0.012939, -0.006470, 0.000397, 0.005249, 0.006866, 0.007263, 0.006470, 0.004028, 0.000793, -0.001617, -0.002808, -0.002411, -0.001617, 0.001190, 0.005646, 0.010101, 0.014160, 0.016602, 0.014984, 0.008911, -0.002014, -0.015778, -0.027954, -0.034821, -0.034424, -0.028351, -0.016998, -0.002014, 0.011749, 0.019043, 0.019043, 0.013763, 0.006470, -0.001617, -0.008911, -0.014557, -0.016998, -0.016205, -0.013763, -0.011749, -0.011322, -0.013763, -0.016998, -0.019836, -0.019440, -0.016602, -0.012146, -0.006866, -0.001617, 0.001617, 0.000793, -0.002411, -0.004456, -0.003632, -0.000397, 0.003632, 0.008087, 0.011322, 0.012543, 0.012939, 0.012543, 0.012146, 0.013367, 0.016998, 0.020660, 0.023499, 0.024292, 0.024292, 0.023071, 0.022278, 0.021851, 0.021851, 0.021454, 0.019043, 0.014557, 0.010925, 0.009705, 0.010925, 0.011322, 0.008484, 0.002411, -0.005249, -0.014160, -0.021454, -0.025909, -0.027527, -0.026337, -0.023499, -0.019836, -0.014984, -0.010101, -0.005249, -0.002808, -0.004456, -0.007263, -0.008911, -0.008484, -0.007263, -0.006866, -0.007263, -0.007690, -0.009705, -0.011749, -0.010925, -0.008087, -0.003632, 0.002411, 0.006866, 0.006866, 0.003632, 0.000000, -0.002411, -0.003235, -0.003632, -0.002411, -0.000397, 0.004456, 0.010925, 0.017822, 0.023071, 0.025513, 0.023895, 0.019440, 0.012939, 0.006073, 0.001617, 0.000397, 0.003632, 0.010101, 0.014557, 0.014557, 0.010529, 0.005249, 0.001190, -0.000397, 0.000397, 0.002411, 0.005249, 0.007263, 0.008911, 0.008911, 0.006866, 0.003235, -0.003235, -0.012146, -0.021057, -0.027527, -0.029144, -0.025909, -0.019440, -0.010925, -0.003235, 0.000793, 0.003235, 0.003235, 0.001190, 0.000397, 0.000397, -0.000397, -0.002014, -0.003632, -0.004028, -0.003235, -0.002014, -0.002411, -0.003632, -0.005646, -0.007263, -0.009705, -0.011322, -0.010529, -0.008911, -0.006470, -0.002808, -0.000397, 0.000397, 0.001617, 0.003235, 0.004456, 0.004456, 0.004852, 0.007263, 0.010529, 0.012146, 0.011749, 0.010925, 0.009705, 0.007263, 0.004852, 0.002411, 0.000000, -0.002014, -0.004028, -0.007263, -0.010925, -0.012543, -0.011322, -0.006470, 0.001190, 0.007263, 0.006470, -0.000397, -0.009308, -0.017395, -0.023071, -0.023895, -0.020660, -0.014160, -0.006866, -0.000793, 0.002808, 0.003632, 0.003235, 0.004028, 0.004456, 0.004456, 0.004456, 0.004028, 0.002411, -0.000397, -0.005646, -0.011749, -0.016205, -0.018219, -0.016205, -0.010925, -0.003235, 0.005249, 0.011322, 0.011749, 0.004852, -0.006470, -0.018219, -0.027130, -0.029572, -0.026733, -0.020660, -0.012543, -0.003235, 0.004852, 0.009705, 0.010529, 0.006073, -0.001190, -0.009308, -0.015778, -0.019440, -0.019043, -0.015778, -0.008911, 0.000793, 0.012146, 0.021057, 0.025909, 0.025513, 0.022278, 0.018219, 0.015778, 0.012939, 0.008911, 0.004852, 0.000793, -0.003632, -0.008087, -0.010529, -0.010101, -0.006073, 0.001190, 0.010101, 0.016998, 0.020233, 0.019836, 0.017395, 0.013367, 0.009705, 0.006470, 0.002808, -0.002411, -0.009308, -0.014984, -0.019440, -0.023071, -0.024292, -0.023499, -0.021454, -0.020233, -0.019440, -0.019440, -0.021454, -0.025909, -0.032806, -0.040894, -0.048187, -0.053467, -0.056305, -0.055908, -0.051849, -0.044556, -0.036865, -0.028748, -0.020660, -0.012146, -0.002411, 0.007263, 0.013763, 0.016602, 0.018219, 0.020233, 0.023071, 0.023895, 0.024292, 0.023895, 0.023499, 0.024689, 0.028748, 0.034027, 0.040100, 0.045776, 0.050629, 0.054291, 0.056305, 0.056305, 0.053864, 0.049011, 0.040894, 0.031586, 0.023895, 0.019440, 0.016602, 0.013763, 0.010925, 0.010529, 0.012146, 0.013367, 0.011749, 0.009705, 0.007690, 0.004028, -0.001617, -0.007263, -0.012146, -0.014984, -0.016602, -0.018219, -0.021454, -0.025909, -0.030365, -0.033630, -0.035645, -0.036438, -0.034821, -0.029968, -0.022675, -0.015778, -0.007690, 0.001190, 0.006470, 0.007263, 0.006470, 0.006073, 0.006470, 0.006073, 0.005646, 0.006470, 0.008911, 0.012146, 0.016205, 0.020660, 0.023499, 0.023895, 0.021454, 0.018219, 0.015778, 0.014160, 0.012146, 0.009705, 0.006073, 0.002808, 0.002014, 0.004028, 0.008911, 0.014160, 0.018219, 0.020233, 0.020660, 0.020233, 0.021454, 0.024689, 0.028748, 0.032410, 0.031586, 0.023499, 0.010101, -0.004028, -0.015381, -0.021057, -0.020233, -0.016205, -0.013763, -0.015381, -0.018616, -0.022278, -0.025909, -0.029144, -0.032806, -0.036041, -0.039703, -0.044159, -0.047791, -0.048187, -0.044952, -0.038483, -0.031189, -0.025513, -0.023071, -0.021851, -0.017822, -0.010925, -0.003632, 0.003235, 0.008911, 0.011749, 0.012146, 0.012543, 0.013763, 0.017395, 0.022675, 0.027527, 0.033203, 0.040100, 0.046173, 0.048615, 0.047791, 0.044159, 0.037659, 0.028748, 0.020233, 0.012939, 0.007263, 0.004028, 0.002808, 0.002014, 0.000397, -0.003632, -0.007690, -0.009308, -0.009308, -0.008087, -0.004852, 0.000000, 0.003632, 0.004456, 0.002411, -0.002014, -0.008484, -0.015381, -0.018219, -0.016602, -0.011749, -0.005249, 0.000793, 0.004852, 0.007690, 0.010101, 0.014984, 0.019836, 0.020660, 0.017822, 0.012939, 0.007690, 0.004028, 0.002411, 0.003235, 0.005249, 0.006470, 0.007690, 0.009308, 0.010925, 0.012543, 0.013763, 0.014160, 0.012146, 0.007690, 0.001190, -0.004456, -0.008087, -0.006470, 0.000397, 0.009308, 0.016602, 0.020660, 0.019836, 0.015381, 0.008484, -0.000397, -0.010925, -0.020660, -0.026733, -0.027954, -0.027130, -0.025116, -0.022278, -0.019440, -0.016602, -0.014160, -0.013367, -0.013367, -0.014160, -0.015381, -0.014557, -0.010529, -0.004028, 0.002411, 0.006866, 0.010925, 0.015778, 0.019043, 0.019836, 0.017822, 0.012543, 0.006470, 0.000793, -0.004456, -0.007690, -0.007690, -0.005249, -0.003235, -0.002808, -0.003632, -0.004852, -0.008087, -0.012146, -0.015381, -0.016998, -0.015778, -0.012939, -0.008087, -0.001617, 0.007263, 0.016205, 0.022675, 0.024689, 0.022675, 0.018616, 0.012543, 0.007263, 0.005249, 0.007263, 0.009308, 0.008484, 0.003632, -0.002014, -0.006866, -0.010925, -0.012939, -0.015381, -0.019440, -0.025116, -0.029968, -0.031586, -0.027954, -0.021057, -0.011322, -0.002411, 0.002411, 0.001617, -0.002014, -0.007263, -0.013367, -0.017822, -0.019440, -0.018219, -0.016602, -0.016602, -0.017822, -0.019440, -0.021057, -0.020233, -0.016602, -0.010925, -0.004028, 0.002411, 0.006866, 0.009308, 0.008484, 0.002808, -0.004028, -0.008484, -0.009308, -0.006073, 0.002014, 0.014557, 0.026733, 0.033630, 0.032806, 0.023499, 0.009705, -0.002411, -0.011322, -0.014557, -0.011749, -0.004456, 0.005646, 0.015381, 0.021057, 0.019836, 0.012146, -0.000793, -0.013367, -0.022675, -0.026733, -0.025909, -0.020660, -0.011749, -0.001190, 0.008484, 0.014557, 0.016998, 0.016602, 0.014160, 0.010529, 0.007263, 0.005249, 0.004028, 0.004028, 0.006073, 0.009308, 0.011322, 0.010529, 0.007690, 0.002808, -0.002014, -0.004456, -0.002808, 0.000397, 0.003235, 0.006073, 0.008911, 0.011322, 0.013763, 0.016205, 0.018616, 0.019836, 0.020233, 0.022278, 0.025116, 0.025513, 0.021454, 0.014557, 0.005646, -0.002808, -0.011322, -0.019836, -0.027954, -0.034027, -0.036041, -0.036041, -0.036041, -0.038483, -0.043732, -0.049835, -0.052673, -0.051849, -0.046570, -0.036865, -0.023071, -0.008484, 0.006073, 0.018219, 0.025116, 0.023895, 0.016602, 0.006866, -0.002411, -0.008087, -0.008911, -0.005249, 0.000793, 0.006470, 0.009705, 0.011322, 0.012939, 0.013763, 0.014160, 0.015381, 0.017822, 0.021454, 0.026337, 0.029572, 0.029968, 0.027130, 0.023499, 0.020660, 0.017822, 0.014160, 0.010101, 0.006866, 0.002808, -0.003235, -0.010529, -0.015778, -0.019043, -0.019440, -0.015381, -0.008484, -0.000397, 0.005249, 0.006866, 0.004028, -0.000793, -0.006073, -0.012146, -0.016998, -0.018616, -0.016205, -0.010925, -0.006866, -0.006073, -0.007263, -0.008087, -0.007263, -0.006073, -0.003235, 0.001617, 0.006866, 0.010529, 0.011749, 0.008911, 0.004456, -0.000397, -0.004456, -0.007263, -0.008484, -0.009308, -0.008484, -0.006866, -0.005646, -0.006073, -0.006073, -0.005646, -0.004028, -0.001190, 0.002014, 0.005249, 0.006866, 0.007263, 0.008087, 0.009705, 0.012146, 0.012939, 0.012543, 0.011322, 0.009705, 0.007690, 0.006073, 0.005249, 0.006073, 0.008087, 0.010529, 0.010529, 0.006866, 0.000397, -0.006470, -0.011322, -0.012939, -0.010925, -0.006470, -0.000397, 0.006073, 0.012146, 0.016205, 0.016602, 0.013367, 0.008087, 0.002411, -0.002411, -0.003235, 0.000793, 0.009705, 0.019836, 0.025513, 0.025116, 0.018219, 0.007263, -0.004028, -0.012543, -0.015778, -0.014160, -0.011749, -0.009308, -0.008484, -0.010529, -0.012939, -0.012543, -0.010925, -0.008484, -0.006470, -0.005646, -0.006470, -0.009308, -0.012146, -0.011322, -0.006470, 0.001617, 0.009705, 0.016602, 0.021454, 0.022675, 0.020233, 0.016205, 0.011749, 0.008484, 0.006470, 0.004028, 0.001617, -0.000397, -0.002014, -0.002014, -0.000793, 0.000793, 0.003632, 0.007690, 0.012543, 0.017822, 0.021057, 0.022278, 0.021057, 0.017395, 0.013367, 0.008911, 0.001617, -0.007690, -0.016998, -0.023895, -0.024292, -0.020233, -0.014160, -0.007263, -0.001190, 0.003632, 0.006866, 0.007263, 0.005646, 0.004028, 0.002411, 0.003235, 0.006073, 0.009308, 0.011322, 0.013367, 0.014984, 0.016998, 0.018219, 0.019836, 0.019440, 0.016205, 0.010529, 0.004028, -0.002014, -0.005646, -0.006073, -0.005249, -0.004852, -0.005249, -0.005646, -0.002808, 0.001617, 0.005646, 0.007690, 0.006073, 0.000000, -0.008484, -0.015778, -0.016998, -0.012543, -0.005646, 0.001190, 0.005249, 0.004456, 0.000397, -0.006470, -0.014984, -0.023895, -0.029968, -0.030792, -0.024292, -0.013367, -0.002411, 0.004028, 0.005249, 0.002808, -0.002411, -0.010101, -0.017395, -0.022278, -0.025909, -0.027130, -0.025909, -0.022675, -0.018616, -0.014160, -0.008484, -0.002808, 0.001190, 0.004028, 0.006470, 0.008484, 0.009308, 0.008911, 0.009308, 0.011749, 0.014557, 0.017822, 0.020233, 0.019043, 0.015381, 0.012146, 0.010925, 0.010101, 0.008911, 0.006073, 0.002014, -0.002014, -0.005249, -0.009705, -0.014984, -0.018219, -0.018219, -0.016602, -0.012543, -0.008087, -0.004852, -0.004028, -0.007263, -0.011749, -0.013367, -0.012543, -0.009705, -0.004456, 0.001617, 0.006470, 0.011322, 0.015778, 0.018616, 0.020660, 0.019836, 0.018219, 0.015381, 0.010925, 0.006470, 0.004028, 0.007263, 0.015778, 0.026733, 0.035645, 0.039703, 0.038483, 0.032410, 0.022675, 0.012543, 0.004028, -0.002014, -0.005249, -0.005646, -0.005249, -0.004456, -0.004456, -0.005646, -0.008087, -0.010925, -0.012146, -0.011749, -0.009308, -0.006470, -0.005249, -0.007263, -0.012146, -0.018219, -0.021454, -0.022278, -0.020233, -0.016602, -0.010925, -0.004028, 0.002014, 0.004456, 0.006470, 0.010101, 0.014557, 0.018616, 0.022278, 0.024292, 0.024292, 0.023071, 0.023499, 0.025909, 0.029144, 0.031982, 0.032806, 0.031189, 0.027527, 0.023071, 0.016205, 0.007263, -0.002014, -0.008484, -0.012146, -0.013763, -0.015778, -0.017822, -0.019836, -0.021057, -0.021057, -0.019440, -0.015381, -0.010925, -0.007263, -0.006073, -0.006866, -0.007690, -0.008484, -0.008911, -0.007690, -0.005646, -0.004028, -0.003235, -0.004028, -0.004852, -0.003632, -0.001190, 0.002808, 0.005646, 0.005249, 0.002411, 0.000397, 0.001190, 0.003632, 0.005646, 0.006073, 0.006073, 0.004852, 0.000793, -0.005249, -0.010925, -0.013367, -0.012543, -0.008911, -0.005646, -0.004852, -0.007263, -0.012543, -0.018616, -0.023895, -0.026733, -0.026733, -0.023071, -0.016205, -0.009705, -0.005646, -0.002411, 0.001190, 0.003632, 0.004456, 0.005249, 0.008484, 0.012146, 0.014984, 0.016205, 0.014557, 0.010925, 0.006866, 0.003235, -0.001190, -0.004456, -0.004028, -0.000793, 0.002014, 0.002808, -0.000397, -0.007263, -0.016205, -0.024292, -0.029572, -0.031189, -0.029572, -0.025909, -0.019836, -0.014160, -0.011322, -0.011749, -0.014160, -0.016998, -0.016998, -0.015778, -0.014984, -0.014984, -0.014984, -0.015381, -0.014160, -0.009308, -0.000397, 0.010529, 0.020233, 0.027130, 0.030365, 0.031189, 0.031189, 0.031586, 0.031586, 0.031189, 0.029144, 0.025116, 0.020233, 0.015381, 0.012146, 0.012543, 0.016998, 0.022278, 0.025116, 0.024292, 0.019836, 0.011322, 0.000793, -0.007263, -0.012146, -0.014984, -0.016205, -0.015778, -0.013367, -0.009705, -0.007263, -0.008087, -0.012543, -0.018616, -0.024689, -0.029572, -0.031189, -0.029144, -0.023895, -0.014984, -0.004456, 0.004456, 0.010529, 0.014557, 0.016205, 0.014557, 0.011322, 0.007690, 0.003632, -0.002014, -0.009705, -0.017395, -0.023071, -0.025513, -0.025116, -0.021851, -0.016998, -0.011749, -0.008087, -0.006866, -0.005249, -0.002411, 0.001617, 0.005646, 0.009308, 0.012146, 0.013763, 0.013367, 0.012146, 0.012146, 0.012543, 0.011322, 0.007263, 0.000793, -0.006470, -0.010529, -0.010101, -0.004852, 0.000793, 0.004028, 0.004852, 0.004028, 0.000793, -0.005249, -0.012543, -0.019440, -0.023499, -0.024689, -0.023895, -0.022675, -0.021454, -0.021057, -0.021057, -0.020233, -0.019043, -0.015778, -0.009308, -0.001617, 0.005249, 0.010925, 0.013367, 0.013367, 0.011322, 0.009308, 0.008484, 0.007263, 0.005249, 0.002014, -0.000793, -0.002014, -0.001190, 0.000000, 0.003235, 0.008911, 0.014160, 0.016602, 0.016205, 0.014160, 0.012939, 0.011322, 0.008911, 0.006073, 0.003235, 0.000793, 0.000793, 0.000793, 0.001617, 0.002411, 0.004028, 0.006073, 0.007690, 0.007690, 0.007263, 0.006073, 0.003632, 0.000000, -0.004028, -0.005249, -0.003235, -0.000397, 0.001190, 0.001617, 0.000397, -0.000793, -0.002411, -0.003632, -0.004456, -0.005646, -0.007690, -0.008484, -0.008087, -0.008484, -0.008911, -0.009705, -0.008484, -0.005249, -0.000793, 0.003632, 0.007690, 0.009308, 0.010101, 0.010101, 0.010101, 0.009308, 0.008087, 0.006470, 0.006470, 0.007263, 0.008087, 0.008484, 0.007263, 0.006470, 0.007690, 0.011749, 0.017822, 0.025513, 0.032410, 0.037659, 0.039703, 0.037659, 0.031982, 0.024292, 0.016602, 0.011322, 0.006866, 0.002808, -0.000397, -0.002411, -0.004456, -0.006866, -0.009705, -0.012543, -0.016205, -0.019440, -0.021057, -0.020233, -0.019043, -0.018219, -0.018616, -0.019836, -0.021057, -0.021454, -0.020233, -0.016998, -0.012543, -0.008911, -0.008911, -0.013367, -0.019043, -0.024689, -0.027130, -0.025513, -0.021851, -0.017395, -0.012543, -0.007690, -0.002411, 0.002808, 0.007690, 0.012543, 0.017822, 0.022675, 0.028748, 0.034424, 0.037659, 0.038483, 0.036865, 0.033630, 0.029572, 0.025513, 0.022278, 0.020233, 0.020660, 0.023499, 0.027130, 0.031189, 0.034027, 0.032410, 0.027527, 0.021454, 0.014557, 0.008911, 0.006470, 0.008087, 0.011749, 0.013763, 0.012146, 0.006073, -0.001617, -0.008484, -0.012146, -0.013763, -0.014557, -0.014984, -0.013367, -0.010925, -0.008087, -0.005249, -0.003632, -0.001190, 0.001617, 0.002014, 0.000000, -0.003632, -0.008911, -0.014557, -0.018219, -0.016998, -0.012939, -0.008484, -0.004852, -0.004456, -0.007263, -0.012146, -0.017395, -0.022278, -0.025116, -0.025116, -0.021851, -0.016602, -0.010925, -0.006470, -0.004456, -0.004028, -0.003235, -0.002411, -0.002014, -0.001617, -0.001190, -0.000793, 0.001617, 0.005249, 0.010925, 0.016602, 0.021454, 0.024689, 0.025116, 0.023071, 0.018219, 0.012146, 0.006470, 0.002411, 0.000397, 0.000000, 0.001617, 0.004456, 0.007263, 0.006866, 0.002808, -0.002808, -0.008484, -0.013763, -0.017822, -0.019836, -0.019836, -0.019440, -0.017822, -0.014557, -0.011322, -0.009705, -0.009308, -0.008911, -0.007690, -0.005249, -0.004456, -0.004852, -0.006470, -0.008484, -0.010101, -0.010925, -0.011749, -0.011322, -0.010529, -0.008087, -0.004852, -0.000793, 0.001190, 0.000000, -0.004852, -0.010101, -0.012543, -0.011749, -0.011322, -0.010925, -0.008484, -0.004028, 0.000397, 0.003632, 0.004852, 0.004456, 0.002808, 0.001190, 0.001190, 0.002411, 0.004852, 0.006866, 0.007690, 0.008087, 0.007690, 0.006470, 0.005249, 0.004028, 0.002808, 0.001617, 0.000793, -0.000397, -0.000397, 0.000793, 0.002014, 0.002014, 0.000793, -0.001617, -0.004852, -0.008087, -0.010925, -0.013367, -0.013763, -0.011749, -0.008087, -0.003235, 0.001190, 0.003632, 0.002411, -0.002411, -0.009705, -0.016602, -0.020660, -0.019440, -0.014160, -0.006470, 0.000793, 0.005646, 0.007690, 0.009705, 0.011749, 0.012146, 0.012146, 0.012543, 0.013367, 0.015778, 0.019440, 0.023071, 0.025909, 0.027527, 0.027527, 0.025116, 0.020233, 0.012146, 0.002808, -0.006470, -0.013763, -0.017822, -0.018616, -0.015778, -0.011322, -0.008484, -0.007690, -0.009308, -0.012543, -0.015381, -0.015778, -0.013367, -0.007263, 0.000397, 0.006866, 0.010101, 0.010529, 0.009705, 0.009308, 0.010101, 0.011749, 0.012543, 0.012939, 0.012543, 0.010529, 0.007263, 0.004028, 0.003235, 0.005249, 0.008911, 0.011322, 0.011322, 0.008087, 0.002808, -0.003235, -0.008484, -0.011749, -0.012146, -0.012543, -0.014557, -0.019043, -0.023499, -0.024292, -0.020660, -0.012939, -0.003632, 0.003632, 0.007263, 0.007263, 0.003632, -0.002014, -0.008087, -0.013367, -0.016998, -0.019440, -0.019440, -0.015381, -0.009705, -0.003632, 0.002411, 0.007263, 0.013367, 0.019043, 0.023895, 0.026733, 0.027527, 0.025513, 0.023071, 0.019043, 0.014557, 0.010529, 0.007263, 0.005249, 0.005249, 0.007263, 0.010529, 0.013367, 0.014984, 0.015778, 0.015381, 0.013367, 0.010529, 0.006866, 0.002411, -0.002014, -0.005646, -0.006866, -0.004852, -0.000793, 0.003632, 0.008484, 0.010925, 0.010529, 0.006866, 0.002014, -0.002014, -0.004456, -0.005249, -0.004852, -0.005646, -0.007263, -0.009308, -0.010925, -0.011322, -0.009705, -0.007690, -0.005646, -0.004852, -0.004852, -0.004456, -0.003632, -0.002014, 0.000000, 0.001190, 0.002411, 0.002014, 0.000793, -0.001190, -0.003632, -0.005646, -0.005646, -0.003632, 0.001190, 0.008087, 0.014984, 0.019440, 0.021454, 0.021057, 0.018219, 0.012543, 0.004852, -0.003235, -0.009308, -0.011322, -0.009705, -0.004456, 0.002808, 0.010529, 0.016998, 0.020660, 0.021057, 0.016998, 0.010529, 0.003235, -0.003632, -0.008911, -0.011749, -0.011749, -0.009308, -0.006470, -0.004852, -0.005249, -0.008087, -0.011749, -0.014984, -0.016998, -0.017822, -0.017822, -0.016602, -0.014557, -0.012146, -0.010529, -0.009308, -0.008911, -0.009308, -0.010925, -0.012146, -0.012939, -0.013367, -0.012543, -0.011749, -0.010529, -0.008911, -0.006470, -0.003632, -0.000793, 0.002411, 0.005249, 0.006470, 0.006073, 0.004456, 0.001190, -0.002808, -0.007263, -0.010101, -0.009705, -0.006470, 0.000397, 0.009308, 0.015778, 0.018219, 0.017395, 0.014160, 0.010529, 0.007690, 0.006073, 0.004456, 0.002014, -0.001190, -0.005249, -0.010101, -0.015381, -0.019440, -0.021454, -0.022278, -0.021851, -0.021057, -0.019440, -0.016998, -0.014557, -0.011322, -0.008911, -0.007263, -0.006073, -0.005646, -0.004852, -0.002411, 0.001617, 0.006470, 0.010101, 0.012543, 0.013763, 0.012146, 0.009308, 0.005646, 0.002411, 0.001190, 0.003235, 0.008087, 0.013763, 0.018616, 0.021057, 0.019440, 0.014557, 0.008911, 0.004852, 0.003235, 0.003632, 0.004852, 0.005646, 0.004852, 0.004456, 0.005249, 0.006470, 0.007263, 0.006470, 0.004028, 0.001190, -0.002014, -0.004852, -0.006470, -0.007690, -0.008484, -0.007263, -0.004456, -0.002411, -0.001617, -0.002014, -0.002411, -0.003235, -0.005249, -0.007690, -0.010101, -0.012543, -0.013763, -0.013367, -0.012146, -0.010529, -0.009308, -0.007263, -0.004456, -0.000793, 0.002014, 0.002014, 0.000793, 0.000397, 0.001617, 0.003235, 0.004028, 0.003632, 0.002808, 0.002808, 0.002411, 0.002014, 0.002411, 0.003632, 0.006073, 0.009308, 0.012543, 0.015778, 0.017822, 0.019043, 0.018219, 0.015381, 0.012146, 0.010101, 0.010101, 0.012146, 0.014160, 0.015778, 0.016602, 0.015381, 0.012543, 0.008484, 0.004852, 0.002411, 0.001190, 0.000000, -0.000793, -0.002411, -0.004852, -0.006866, -0.008484, -0.010529, -0.013367, -0.016205, -0.017395, -0.016998, -0.014557, -0.011322, -0.007263, -0.004852, -0.004456, -0.006073, -0.008484, -0.010101, -0.009705, -0.008484, -0.006470, -0.004028, -0.002808, -0.004028, -0.006073, -0.007690, -0.006073, -0.002808, 0.000397, 0.002808, 0.003235, 0.002411, 0.000793, -0.000397, -0.000793, 0.000000, 0.001617, 0.003235, 0.003632, 0.003235, 0.003632, 0.006073, 0.009308, 0.012146, 0.013367, 0.012543, 0.008911, 0.004028, -0.001617, -0.006470, -0.008484, -0.008484, -0.007263, -0.005249, -0.003632, -0.004028, -0.005646, -0.006866, -0.006470, -0.003235, 0.001617, 0.006866, 0.010925, 0.012939, 0.013367, 0.011322, 0.007263, 0.001617, -0.003632, -0.008484, -0.011749, -0.012939, -0.013367, -0.012939, -0.012146, -0.011322, -0.010925, -0.009705, -0.007690, -0.005249, -0.002411, -0.000397, 0.000397, -0.000793, -0.001617, -0.002014, -0.000793, 0.002411, 0.006866, 0.012146, 0.017395, 0.021057, 0.023071, 0.023895, 0.023499, 0.020660, 0.016602, 0.012543, 0.008911, 0.006073, 0.003632, 0.002014, 0.002014, 0.002808, 0.003235, 0.003235, 0.003235, 0.002411, 0.000397, -0.000793, -0.002014, -0.002808, -0.002808, -0.002014, -0.000397, 0.001617, 0.004028, 0.005646, 0.006073, 0.004456, 0.001190, -0.002808, -0.006470, -0.008484, -0.007690, -0.005646, -0.003235, -0.001617, -0.000793, -0.000793, -0.001617, -0.003235, -0.004852, -0.006470, -0.006866, -0.007263, -0.007263, -0.006866, -0.006470, -0.006073, -0.006073, -0.004028, -0.000793, 0.001190, 0.001617, 0.000793, -0.000793, -0.002411, -0.003235, -0.003632, -0.003235, -0.000793, 0.001617, 0.003235, 0.004456, 0.004456, 0.004028, 0.003632, 0.001617, -0.001617, -0.004456, -0.006073, -0.006073, -0.004852, -0.003632, -0.002411, -0.002014, -0.002411, -0.003632, -0.005646, -0.007263, -0.006866, -0.003632, 0.001617, 0.007690, 0.011749, 0.014160, 0.015381, 0.016602, 0.018616, 0.021057, 0.022278, 0.021851, 0.019043, 0.013763, 0.008087, 0.004028, 0.001190, -0.001617, -0.004852, -0.008087, -0.010101, -0.011322, -0.011322, -0.010101, -0.008911, -0.007690, -0.006866, -0.007263, -0.008911, -0.010529, -0.012146, -0.014160, -0.018219, -0.023499, -0.028748, -0.032410, -0.033630, -0.031189, -0.026733, -0.020660, -0.014160, -0.008087, -0.003235, -0.000793, -0.000793, -0.002014, -0.003632, -0.004028, -0.001190, 0.004456, 0.011322, 0.017395, 0.021057, 0.022675, 0.023499, 0.024292, 0.024689, 0.024689, 0.024292, 0.022675, 0.019440, 0.015778, 0.011322, 0.006470, 0.002411, 0.000000, -0.002014, -0.004456, -0.007690, -0.012146, -0.017822, -0.024689, -0.030792, -0.034821, -0.035645, -0.032806, -0.027130, -0.019440, -0.012939, -0.006866, -0.001617, 0.002411, 0.004852, 0.005646, 0.004852, 0.003235, 0.001190, 0.000397, 0.000397, 0.001190, 0.002808, 0.004028, 0.004456, 0.003235, 0.002411, 0.002411, 0.004028, 0.007263, 0.009308, 0.009705, 0.008087, 0.007690, 0.009705, 0.012543, 0.015778, 0.017822, 0.018219, 0.017395, 0.016205, 0.014557, 0.013367, 0.012543, 0.012939, 0.014160, 0.015778, 0.016205, 0.015381, 0.012939, 0.009705, 0.006470, 0.003632, 0.002014, 0.000397, -0.000793, -0.001617, -0.002808, -0.005249, -0.006866, -0.008087, -0.008911, -0.009308, -0.008484, -0.006470, -0.004852, -0.004456, -0.006073, -0.009308, -0.014557, -0.019043, -0.021851, -0.021057, -0.016998, -0.012146, -0.006470, -0.001617, 0.001190, 0.002808, 0.004028, 0.004456, 0.005249, 0.006073, 0.007263, 0.009705, 0.013367, 0.017395, 0.021851, 0.025513, 0.027954, 0.028351, 0.026337, 0.021454, 0.014557, 0.008484, 0.004456, 0.001190, -0.001190, -0.002411, -0.002411, -0.002411, -0.003235, -0.004852, -0.005646, -0.005249, -0.004456, -0.003632, -0.002411, -0.001190, -0.000397, 0.000793, 0.001190, 0.000793, 0.000000, 0.000000, 0.001190, 0.002014, 0.001190, -0.001617, -0.006866, -0.012543, -0.016998, -0.018219, -0.016998, -0.014984, -0.012939, -0.012146, -0.012543, -0.012543, -0.011749, -0.010101, -0.008484, -0.007263, -0.006470, -0.005646, -0.004852, -0.004028, -0.002014, 0.000793, 0.002411, 0.002014, 0.000397, -0.000397, 0.000793, 0.003632, 0.006470, 0.008484, 0.008911, 0.008911, 0.008484, 0.008911, 0.010101, 0.010529, 0.010529, 0.009308, 0.007690, 0.006866, 0.006470, 0.006470, 0.006073, 0.005249, 0.002014, -0.002808, -0.006866, -0.008911, -0.009308, -0.008484, -0.006073, -0.002808, 0.000397, 0.003235, 0.003632, 0.000793, -0.004852, -0.010101, -0.012543, -0.011322, -0.006866, -0.001617, 0.002808, 0.005646, 0.006470, 0.006073, 0.004852, 0.003632, 0.002411, 0.002411, 0.004028, 0.005646, 0.007690, 0.010101, 0.012939, 0.014160, 0.012939, 0.009705, 0.004852, 0.001190, -0.001617, -0.003632, -0.004852, -0.005249, -0.005646, -0.005646, -0.005646, -0.005646, -0.006866, -0.008484, -0.010529, -0.011749, -0.012146, -0.010101, -0.005646, -0.000793, 0.003632, 0.005646, 0.004456, 0.002411, 0.000000, -0.001190, -0.001190, -0.000793, 0.000793, 0.002808, 0.005646, 0.008087, 0.010101, 0.010925, 0.009705, 0.008087, 0.006073, 0.004028, 0.000793, -0.002808, -0.005646, -0.006866, -0.006073, -0.003235, 0.000793, 0.004852, 0.008484, 0.010529, 0.010925, 0.010101, 0.008087, 0.004456, -0.000397, -0.005646, -0.009705, -0.011322, -0.010925, -0.010101, -0.008484, -0.006866, -0.005249, -0.003235, -0.001617, -0.002014, -0.003235, -0.004456, -0.005646, -0.007263, -0.010101, -0.011749, -0.011749, -0.010101, -0.007263, -0.004028, -0.001617, 0.000000, 0.000397, 0.000397, 0.001190, 0.004028, 0.008087, 0.011749, 0.013367, 0.012543, 0.010925, 0.008911, 0.006866, 0.006470, 0.006866, 0.007263, 0.007263, 0.007263, 0.007263, 0.006470, 0.003632, 0.000397, -0.002808, -0.004852, -0.004852, -0.003632, -0.002411, -0.002014, -0.002411, -0.003235, -0.004456, -0.004852, -0.004456, -0.004028, -0.003632, -0.003632, -0.003632, -0.002808, -0.001617, 0.000397, 0.002014, 0.002808, 0.001617, 0.000000, -0.002808, -0.005646, -0.008484, -0.011322, -0.012939, -0.012146, -0.009308, -0.006470, -0.004028, -0.004028, -0.005249, -0.007690, -0.009308, -0.008484, -0.006073, -0.002808, 0.001617, 0.006470, 0.010101, 0.012146, 0.012146, 0.010925, 0.008911, 0.007263, 0.006073, 0.005249, 0.004456, 0.005249, 0.007690, 0.009705, 0.010101, 0.008911, 0.006866, 0.004456, 0.003235, 0.003632, 0.003235, 0.002014, 0.000397, -0.002014, -0.004852, -0.006470, -0.007690, -0.008087, -0.007690, -0.005646, -0.002411, 0.000397, 0.001190, 0.000000, -0.002411, -0.004028, -0.004028, -0.001617, 0.002411, 0.005646, 0.007263, 0.007263, 0.006073, 0.004456, 0.002411, 0.000397, -0.000793, -0.000793, 0.000000, 0.000793, 0.000793, 0.000000, -0.001617, -0.004028, -0.007263, -0.010529, -0.012543, -0.012939, -0.012543, -0.012146, -0.012146, -0.012543, -0.012543, -0.012146, -0.010925, -0.008911, -0.006470, -0.003632, -0.000793, 0.002014, 0.004456, 0.006470, 0.007263, 0.007690, 0.007263, 0.006470, 0.006073, 0.006470, 0.007690, 0.009308, 0.011322, 0.014160, 0.017395, 0.019440, 0.019836, 0.019440, 0.017822, 0.014160, 0.008911, 0.001617, -0.005249, -0.010101, -0.012146, -0.010925, -0.007263, -0.001617, 0.004456, 0.009308, 0.011749, 0.011322, 0.007690, 0.002411, -0.003235, -0.008087, -0.010101, -0.009705, -0.008087, -0.006073, -0.003632, -0.002014, -0.000397, 0.000000, 0.000397, 0.000000, -0.000793, -0.002014, -0.004028, -0.005646, -0.006866, -0.007263, -0.006866, -0.006073, -0.004852, -0.002808, -0.000397, 0.001190, 0.002808, 0.003632, 0.004456, 0.005646, 0.007690, 0.008911, 0.008911, 0.006470, 0.002014, -0.002808, -0.006470, -0.007263, -0.005249, -0.002014, 0.001190, 0.005249, 0.008484, 0.010925, 0.011749, 0.012146, 0.012146, 0.011749, 0.009705, 0.006866, 0.003632, 0.002014, 0.002014, 0.001617, 0.000000, -0.003235, -0.006470, -0.009308, -0.010925, -0.011749, -0.011322, -0.009705, -0.008087, -0.006073, -0.004456, -0.003235, -0.002014, -0.001617, -0.002014, -0.002014, -0.002411, -0.002808, -0.002411, -0.001617, -0.000793, 0.000000, 0.000397, 0.000397, 0.000793, 0.000793, 0.000793, 0.000000, -0.001190, -0.002014, -0.002014, -0.000793, 0.001190, 0.002411, 0.002014, 0.000793, -0.000397, -0.002014, -0.002808, -0.002808, -0.002014, -0.001190, -0.000397, 0.000397, 0.000793, 0.000397, -0.001190, -0.003235, -0.004456, -0.004028, -0.003632, -0.002411, -0.001190, 0.000793, 0.002808, 0.004852, 0.006866, 0.008911, 0.010101, 0.010529, 0.010101, 0.008911, 0.007263, 0.004028, 0.001190, -0.000793, -0.003235, -0.005249, -0.006866, -0.006866, -0.006073, -0.004028, -0.002411, -0.000793, 0.000000, 0.001190, 0.002411, 0.003235, 0.003632, 0.003235, 0.002411, 0.002411, 0.003235, 0.004852, 0.007690, 0.010925, 0.014984, 0.019440, 0.022278, 0.022675, 0.021851, 0.019440, 0.016602, 0.013367, 0.009705, 0.005646, 0.002411, 0.000397, 0.000000, 0.000397, 0.000397, -0.000793, -0.002411, -0.004456, -0.006073, -0.007263, -0.008087, -0.008087, -0.007690, -0.007263, -0.007263, -0.008087, -0.008911, -0.010101, -0.010529, -0.010925, -0.011322, -0.011322, -0.010925, -0.010529, -0.009705, -0.008484, -0.006866, -0.004456, -0.001617, 0.001190, 0.003632, 0.005249, 0.006073, 0.006866, 0.007263, 0.006866, 0.005646, 0.004456, 0.004028, 0.005249, 0.006866, 0.008087, 0.008087, 0.006470, 0.003235, 0.000397, -0.001617, -0.002014, -0.002014, -0.002014, -0.002014, -0.002808, -0.003632, -0.003632, -0.003235, -0.002411, -0.001617, -0.001617, -0.002411, -0.003235, -0.004028, -0.004852, -0.005646, -0.006073, -0.006073, -0.006470, -0.006073, -0.004852, -0.003632, -0.002808, -0.002014, -0.002808, -0.004456, -0.006470, -0.008911, -0.011322, -0.012939, -0.013367, -0.012146, -0.009705, -0.006866, -0.004028, -0.001190, 0.002411, 0.007263, 0.011322, 0.013367, 0.012146, 0.007690, 0.002411, -0.002808, -0.006073, -0.006470, -0.004456, -0.002411, -0.000793, -0.000397, -0.001190, -0.002411, -0.003235, -0.004028, -0.004456, -0.004456, -0.004028, -0.003235, -0.002411, -0.001190, 0.000793, 0.002411, 0.003235, 0.003235, 0.002411, 0.001617, -0.000793, -0.003235, -0.006470, -0.008911, -0.009705, -0.009308, -0.006866, -0.002411, 0.002411, 0.006073, 0.008087, 0.008087, 0.005249, 0.000397, -0.004028, -0.006866, -0.006470, -0.004456, -0.001617, 0.001617, 0.004456, 0.006073, 0.005646, 0.004028, 0.002014, 0.001190, 0.000793, 0.000000, -0.000397, -0.000793, 0.000000, 0.000793, 0.000793, 0.000793, 0.000793, 0.001617, 0.002808, 0.005646, 0.008087, 0.010101, 0.010101, 0.008087, 0.004456, 0.000793, -0.002411, -0.004456, -0.004852, -0.004028, -0.002014, -0.000397, 0.000793, 0.000793, 0.000793, -0.000397, -0.002411, -0.003632, -0.004028, -0.003235, -0.002014, -0.000793, 0.001190, 0.002808, 0.003632, 0.003632, 0.003235, 0.002014, 0.000000, -0.001190, -0.002014, -0.002808, -0.003235, -0.004028, -0.004456, -0.004456, -0.003235, -0.002014, -0.002014, -0.004028, -0.006470, -0.008911, -0.009308, -0.007690, -0.004852, -0.001617, 0.001190, 0.002808, 0.004028, 0.004852, 0.006470, 0.007690, 0.008087, 0.007690, 0.006470, 0.004456, 0.002014, -0.000397, -0.002808, -0.004456, -0.005249, -0.004456, -0.002808, -0.001617, -0.000397, 0.000793, 0.000793, 0.000397, -0.000397, -0.001190, -0.002411, -0.002808, -0.003235, -0.004456, -0.006866, -0.009705, -0.012543, -0.014557, -0.015778, -0.015381, -0.012939, -0.009308, -0.005249, -0.001190, 0.002411, 0.005249, 0.006866, 0.008911, 0.011322, 0.013367, 0.014984, 0.015381, 0.014984, 0.013763, 0.012146, 0.010529, 0.009705, 0.009308, 0.009705, 0.009308, 0.008484, 0.006866, 0.004456, 0.002411, 0.001190, 0.000397, -0.000397, -0.000793, -0.001617, -0.002411, -0.002411, -0.001190, 0.000793, 0.002411, 0.003632, 0.003632, 0.003235, 0.002411, 0.001617, 0.000397, -0.000793, -0.001617, -0.001617, -0.001617, -0.002014, -0.002411, -0.003235, -0.004028, -0.004852, -0.005249, -0.006073, -0.006866, -0.008484, -0.011322, -0.014160, -0.016205, -0.015778, -0.012939, -0.009308, -0.006073, -0.004028, -0.002411, -0.000793, 0.000397, 0.000000, -0.001617, -0.003235, -0.003235, -0.001190, 0.002014, 0.005249, 0.007263, 0.008484, 0.008484, 0.007263, 0.005249, 0.002411, -0.000397, -0.001617, -0.002014, -0.001617, -0.000397, 0.000793, 0.001617, 0.002411, 0.004456, 0.007690, 0.011322, 0.013763, 0.014557, 0.012939, 0.010529, 0.007263, 0.004028, 0.001617, 0.000000, -0.000397, -0.000793, -0.000793, -0.000793, -0.001617, -0.002014, -0.002808, -0.003235, -0.003235, -0.002808, -0.001190, 0.000397, 0.002411, 0.004456, 0.006073, 0.006470, 0.004852, 0.001617, -0.001617, -0.005249, -0.008484, -0.010529, -0.010101, -0.007690, -0.003632, 0.001190, 0.004852, 0.006866, 0.007263, 0.006866, 0.006866, 0.006470, 0.005646, 0.003632, 0.001190, -0.001190, -0.004028, -0.005646, -0.005646, -0.004852, -0.002411, 0.000000, 0.002808, 0.004028, 0.004456, 0.004028, 0.002411, 0.000000, -0.002808, -0.004852, -0.005249, -0.004456, -0.003235, -0.001617, 0.000000, 0.001190, 0.001190, 0.000000, -0.003235, -0.006866, -0.010101, -0.012543, -0.013367, -0.012146, -0.009308, -0.005249, -0.000793, 0.002808, 0.004852, 0.006470, 0.008484, 0.010529, 0.010925, 0.008911, 0.005249, 0.000793, -0.002411, -0.004028, -0.005249, -0.005249, -0.005249, -0.004852, -0.003235, -0.000397, 0.002808, 0.006073, 0.008484, 0.010101, 0.010925, 0.011749, 0.012146, 0.011322, 0.009308, 0.007690, 0.006470, 0.005646, 0.004852, 0.003632, 0.002014, 0.000000, -0.002411, -0.004852, -0.006866, -0.008484, -0.008484, -0.007690, -0.006470, -0.006073, -0.006866, -0.008484, -0.010529, -0.013367, -0.016602, -0.018219, -0.018616, -0.016998, -0.013763, -0.008911, -0.003632, 0.000397, 0.003235, 0.005646, 0.006470, 0.006866, 0.008087, 0.009705, 0.011322, 0.013763, 0.015778, 0.017395, 0.018616, 0.018219, 0.016205, 0.013763, 0.010925, 0.007690, 0.004456, 0.002014, 0.000000, -0.000397, 0.000000, 0.000397, 0.000793, 0.001190, 0.002014, 0.003632, 0.004028, 0.003235, 0.001190, -0.000793, -0.003235, -0.004852, -0.006470, -0.007690, -0.008911, -0.010529, -0.010925, -0.011322, -0.011322, -0.010529, -0.010101, -0.010925, -0.012146, -0.013367, -0.014160, -0.014160, -0.013367, -0.011749, -0.010101, -0.008484, -0.007263, -0.006073, -0.005249, -0.004456, -0.002808, -0.000397, 0.002808, 0.005646, 0.008484, 0.010529, 0.011749, 0.011749, 0.010529, 0.008484, 0.006470, 0.005646, 0.005646, 0.006073, 0.007263, 0.008911, 0.011749, 0.014557, 0.016602, 0.017822, 0.017822, 0.016602, 0.014557, 0.012543, 0.011322, 0.010101, 0.008484, 0.005646, 0.002411, -0.000793, -0.003235, -0.005646, -0.007690, -0.008484, -0.008087, -0.007263, -0.006470, -0.006470, -0.006866, -0.007263, -0.006470, -0.005646, -0.004456, -0.003235, -0.002411, -0.001617, -0.001190, -0.000397, 0.000000, 0.000000, 0.000000, 0.000397, 0.000397, 0.000793, 0.000793, 0.001190, 0.001190, 0.001190, 0.000000, -0.002014, -0.004028, -0.006073, -0.007263, -0.007263, -0.006866, -0.005249, -0.003235, -0.002411, -0.002808, -0.003632, -0.004456, -0.004456, -0.003632, -0.003235, -0.002014, -0.000793, 0.000397, 0.001190, 0.001190, 0.001617, 0.001190, 0.000397, -0.000793, -0.002411, -0.003632, -0.005249, -0.006470, -0.006866, -0.005646, -0.003235, 0.000000, 0.002411, 0.004456, 0.005249, 0.004852, 0.003235, 0.000793, -0.002014, -0.004456, -0.005646, -0.006073, -0.005646, -0.004028, -0.002014, 0.000397, 0.002014, 0.003632, 0.004028, 0.003235, 0.002411, 0.002411, 0.003235, 0.004456, 0.005646, 0.006866, 0.006866, 0.006866, 0.006470, 0.006866, 0.007690, 0.008484, 0.009308, 0.009308, 0.008484, 0.006866, 0.005249, 0.004456, 0.003632, 0.002808, 0.000793, -0.002014, -0.004852, -0.008484, -0.012146, -0.014557, -0.015381, -0.014557, -0.012543, -0.009308, -0.005646, -0.002808, -0.000397, 0.000397, 0.000397, 0.000000, -0.000397, 0.000000, 0.000397, 0.000793, 0.001190, 0.001190, 0.001190, 0.001190, 0.002014, 0.002411, 0.003235, 0.004028, 0.004852, 0.004456, 0.003235, 0.001190, -0.000397, -0.001190, 0.000000, 0.002411, 0.005249, 0.007263, 0.008484, 0.009308, 0.009308, 0.008484, 0.007263, 0.006073, 0.004456, 0.002808, 0.000793, -0.001190, -0.002808, -0.003632, -0.002808, 0.000000, 0.003632, 0.004852, 0.002808, -0.002411, -0.008911, -0.014557, -0.018219, -0.019043, -0.018219, -0.016205, -0.014160, -0.012543, -0.011322, -0.010101, -0.010101, -0.010529, -0.011322, -0.011749, -0.012543, -0.012543, -0.012146, -0.010529, -0.007690, -0.005646, -0.004456, -0.004028, -0.003632, -0.002411, 0.000000, 0.002808, 0.006073, 0.008484, 0.009705, 0.009705, 0.008911, 0.007690, 0.006866, 0.006866, 0.006866, 0.007690, 0.008484, 0.009308, 0.009705, 0.009308, 0.009308, 0.008484, 0.008087, 0.007690, 0.007263, 0.007263, 0.007263, 0.007263, 0.006470, 0.005249, 0.004456, 0.003632, 0.002014, -0.000793, -0.004456, -0.007690, -0.008911, -0.008087, -0.006470, -0.004852, -0.003632, -0.003632, -0.003632, -0.004028, -0.004028, -0.003632, -0.002411, -0.001190, -0.000397, -0.000793, -0.001190, -0.001617, -0.001617, -0.000397, 0.000397, 0.001617, 0.003235, 0.004852, 0.006470, 0.007263, 0.006866, 0.005646, 0.003632, 0.001617, 0.000000, -0.000397, -0.000397, 0.001190, 0.002014, 0.002014, 0.000397, -0.001190, -0.001190, -0.000397, 0.001190, 0.002411, 0.002808, 0.001617, -0.000397, -0.003235, -0.005249, -0.006073, -0.005646, -0.004456, -0.003632, -0.003235, -0.002808, -0.002014, 0.000000, 0.001190, 0.001617, 0.000793, -0.000397, -0.001617, -0.002808, -0.002808, -0.001617, 0.001190, 0.004028, 0.006470, 0.007690, 0.008087, 0.008087, 0.007263, 0.005646, 0.004028, 0.002808, 0.002808, 0.002808, 0.002808, 0.002411, 0.001190, -0.000397, -0.001617, -0.002014, -0.001617, -0.000793, 0.000000, 0.000793, 0.002014, 0.002411, 0.001617, 0.000397, -0.001190, -0.002411, -0.003632, -0.004028, -0.004456, -0.004852, -0.004456, -0.004028, -0.002808, -0.001617, -0.000793, -0.000793, -0.002014, -0.004456, -0.006866, -0.008911, -0.008911, -0.007690, -0.004852, -0.002014, 0.000397, 0.001190, 0.001190, 0.001190, 0.001617, 0.001617, 0.001190, 0.000397, -0.001190, -0.002014, -0.002411, -0.001617, -0.000793, 0.000000, 0.000793, 0.001190, 0.002014, 0.003235, 0.004852, 0.005249, 0.004852, 0.004852, 0.004028, 0.003235, 0.002808, 0.002808, 0.003632, 0.005646, 0.008484, 0.011322, 0.013367, 0.014557, 0.014160, 0.012939, 0.010925, 0.008087, 0.004852, 0.001617, -0.000793, -0.001617, -0.001617, -0.000793, -0.000397, -0.000793, -0.001190, -0.001617, -0.002014, -0.002014, -0.003235, -0.005646, -0.008087, -0.010101, -0.011322, -0.011749, -0.011322, -0.010925, -0.010101, -0.008484, -0.006073, -0.004028, -0.002014, -0.000397, 0.000793, 0.002014, 0.003235, 0.004028, 0.003632, 0.002411, 0.001190, 0.000397, -0.000793, -0.001617, -0.002411, -0.002808, -0.002411, -0.000397, 0.001617, 0.003235, 0.004028, 0.004028, 0.003632, 0.003632, 0.003632, 0.003632, 0.004028, 0.003632, 0.003632, 0.003235, 0.002411, 0.001190, 0.000397, 0.000000, 0.000000, 0.000793, 0.002014, 0.003235, 0.003632, 0.002808, 0.000397, -0.002411, -0.004456, -0.005249, -0.004852, -0.004456, -0.003235, -0.002014, -0.000793, -0.000397, -0.000397, -0.001190, -0.002411, -0.003235, -0.003235, -0.002411, -0.000793, 0.001190, 0.003235, 0.004852, 0.006866, 0.008484, 0.009308, 0.008484, 0.006470, 0.004456, 0.002808, 0.002411, 0.002411, 0.002411, 0.002411, 0.001190, -0.000397, -0.002808, -0.005646, -0.007690, -0.009308, -0.010529, -0.011322, -0.012146, -0.011749, -0.010529, -0.008484, -0.006866, -0.006073, -0.006470, -0.006866, -0.007263, -0.006073, -0.003632, -0.000397, 0.002808, 0.004852, 0.006073, 0.005646, 0.004456, 0.002808, 0.001617, 0.001190, 0.002014, 0.003235, 0.004852, 0.006073, 0.006470, 0.006073, 0.005249, 0.004028, 0.002014, 0.000000, -0.001617, -0.002411, -0.002014, -0.000397, 0.001617, 0.003235, 0.004852, 0.006470, 0.007690, 0.008087, 0.008484, 0.008484, 0.008087, 0.006470, 0.004028, 0.000397, -0.004028, -0.008087, -0.010529, -0.010529, -0.008484, -0.006073, -0.004028, -0.002014, -0.000397, 0.000397, 0.000793, 0.001190, 0.001190, 0.000793, -0.000397, -0.001190, -0.000793, 0.000000, 0.000793, 0.001190, 0.000397, 0.000397, 0.000397, 0.000793, 0.001190, 0.001190, 0.001190, 0.000793, 0.000397, 0.000397, 0.001190, 0.001617, 0.002014, 0.002014, 0.001190, -0.000397, -0.002014, -0.003235, -0.003632, -0.003235, -0.002808, -0.002411, -0.002411, -0.003235, -0.003632, -0.004028, -0.004028, -0.002808, -0.000793, 0.001617, 0.004028, 0.006470, 0.007690, 0.008087, 0.006470, 0.004028, 0.000793, -0.001617, -0.004028, -0.005646, -0.007263, -0.008911, -0.010529, -0.011322, -0.011749, -0.012146, -0.010925, -0.008911, -0.005646, -0.003235, -0.001617, 0.000000, 0.001190, 0.002808, 0.003632, 0.003235, 0.002411, 0.000793, 0.000000, 0.000000, 0.000397, 0.001617, 0.002411, 0.002411, 0.001190, 0.000000, -0.000793, -0.001190, -0.000397, 0.000397, 0.002411, 0.004456, 0.006073, 0.006866, 0.007263, 0.006866, 0.006866, 0.006866, 0.007263, 0.007690, 0.008087, 0.007690, 0.006470, 0.004852, 0.002411, 0.000000, -0.001617, -0.002808, -0.002808, -0.002014, -0.000397, 0.001190, 0.002808, 0.003235, 0.002808, 0.001190, -0.000397, -0.001190, -0.001617, -0.002014, -0.003632, -0.005646, -0.007263, -0.008484, -0.008911, -0.009308, -0.009308, -0.008484, -0.007690, -0.007263, -0.006866, -0.006470, -0.006470, -0.007263, -0.008484, -0.008484, -0.007263, -0.004028, 0.000000, 0.003235, 0.005249, 0.006073, 0.005249, 0.004028, 0.002411, 0.001190, 0.000793, 0.001190, 0.002808, 0.004456, 0.005646, 0.006470, 0.006073, 0.005249, 0.003632, 0.002411, 0.002014, 0.002014, 0.002411, 0.002411, 0.002808, 0.003235, 0.003235, 0.002411, 0.001617, 0.000000, -0.001190, -0.002014, -0.001617, -0.001617, -0.001617, -0.002411, -0.003235, -0.004456, -0.006073, -0.007263, -0.008087, -0.008484, -0.008484, -0.007690, -0.006073, -0.004456, -0.002808, -0.000793, 0.001190, 0.003235, 0.004852, 0.006073, 0.005646, 0.003235, 0.000000, -0.003632, -0.005646, -0.005249, -0.002808, 0.000397, 0.003235, 0.005646, 0.006470, 0.006073, 0.005249, 0.004028, 0.002411, 0.000793, -0.000397, -0.001190, -0.001190, -0.000397, 0.000793, 0.002014, 0.002411, 0.002014, 0.001190, 0.000000, -0.000793, -0.001190, -0.000793, -0.000397, 0.000397, 0.000793, 0.001190, 0.001190, 0.000000, -0.001617, -0.003235, -0.004028, -0.003235, -0.000793, 0.001617, 0.003632, 0.004456, 0.004028, 0.002808, 0.001617, 0.001190, 0.001617, 0.002014, 0.002014, 0.001617, 0.000397, -0.001617, -0.004028, -0.005646, -0.006866, -0.006866, -0.006866, -0.005646, -0.004028, -0.002411, -0.000793, 0.000000, 0.000397, 0.000793, 0.000793, 0.000397, -0.000397, -0.001617, -0.002411, -0.002808, -0.002014, -0.001190, -0.000793, 0.000397, 0.002014, 0.004028, 0.006073, 0.008087, 0.009308, 0.009705, 0.010101, 0.010101, 0.009705, 0.009308, 0.008484, 0.007263, 0.005249, 0.002808, 0.000397, -0.002014, -0.003235, -0.004456, -0.004852, -0.004852, -0.004852, -0.005249, -0.005249, -0.005249, -0.005646, -0.006470, -0.008087, -0.009308, -0.010101, -0.009705, -0.007690, -0.004852, -0.002014, 0.000793, 0.002411, 0.003235, 0.002808, 0.002411, 0.002411, 0.003235, 0.005249, 0.007690, 0.008087, 0.006866, 0.004852, 0.002014, 0.000000, -0.000793, -0.000397, 0.000397, 0.002014, 0.003632, 0.005249, 0.006073, 0.006470, 0.006073, 0.005249, 0.004028, 0.003235, 0.002411, 0.002014, 0.002411, 0.003235, 0.004028, 0.004028, 0.004028, 0.004456, 0.004852, 0.004852, 0.004028, 0.002411, 0.000793, -0.001190, -0.002808, -0.002411, -0.001190, 0.000000, 0.000793, 0.000000, -0.002014, -0.004028, -0.006073, -0.007263, -0.008087, -0.008484, -0.007690, -0.006073, -0.003632, -0.002014, -0.001190, -0.001190, -0.001617, -0.002014, -0.002808, -0.003632, -0.004028, -0.002808, -0.000397, 0.002014, 0.004028, 0.004852, 0.004852, 0.004852, 0.004456, 0.003632, 0.002411, 0.000793, -0.000397, -0.001617, -0.002014, -0.001617, -0.000397, 0.001190, 0.002014, 0.002411, 0.002808, 0.003235, 0.003235, 0.002411, 0.001617, 0.000793, 0.000793, 0.001617, 0.002808, 0.004456, 0.005646, 0.006866, 0.007263, 0.006470, 0.004852, 0.002014, -0.001190, -0.003632, -0.004852, -0.004852 };

struct Material {
    Material(float density, float yMod, float pRatio, const ofColor& color)
        : density(density), yMod(yMod), pRatio(pRatio), color(color) {}
    float density;
    float yMod;
    float pRatio;
    ofColor color;
};

static const Material materials[NUM_MATERIALS] = { Material(8940.f, 123.4f * 1e9f, 0.34f, ofColor(255, 0, 0, 255)),
                                                   Material(2700.f, 72.f * 1e9f, 0.19f, ofColor(0, 255, 0, 255)),
                                                   Material(2700.f, 62.f * 1e9f, 0.20f, ofColor(0, 0, 255, 255)),
                                                   Material(1200.f, 2.4f * 1e9f, 0.37f, ofColor(255, 0, 255, 255)) };


//--------------------------------------------------------------
void ofApp::setup(){
    windowResized(ofGetWidth(), ofGetHeight());

    // initialize light
    ofSetSmoothLighting(true);
    pointLight.setDiffuseColor(ofFloatColor(.85, .85, .55));
    pointLight.setSpecularColor(ofFloatColor(1.f, 1.f, 1.f));


    // initialize ball positions, velocities, rFactors to random values
    const float MAX_SPEED = 10.f;
    const float MIN_RADIUS = 0.2f;
    const float MAX_RADIUS = 0.4f;
    const float MIN_RFACTOR = 0.3f;
    const float MAX_RFACTOR = 0.8f;
    for (int i = 0; i < N_BALLS; i++) {
        // random radius
        balls[i].r = MIN_RADIUS + ofRandomuf() * (MAX_RADIUS - MIN_RADIUS);

        // random starting position
        balls[i].p.x = pMin.x + balls[i].r + ofRandomuf() * (pMax.x - pMin.x - 2.f*balls[i].r);
        balls[i].p.y = pMin.y + balls[i].r + ofRandomuf() * (pMax.y - pMin.y - 2.f*balls[i].r);
        balls[i].p.z = pMin.z + balls[i].r + ofRandomuf() * (pMax.z - pMin.z - 2.f*balls[i].r);

        // random velocity (randomly sample unit sphere surface with uniform distribution)
        float theta = TWO_PI * ofRandomuf();
        float phi = acosf(2.f * ofRandomuf() - 1.f);
        float speed = ofRandomuf() * MAX_SPEED;
        balls[i].v.x = speed * sinf(phi) * cosf(theta);
        balls[i].v.y = speed * sinf(phi) * sinf(theta);
        balls[i].v.z = speed * cosf(phi);

        balls[i].rFactor = MIN_RFACTOR + ofRandomuf() * (MAX_RFACTOR - MIN_RFACTOR);

        // choose a material
        int mi = min((int)(ofRandomuf() * NUM_MATERIALS), NUM_MATERIALS - 1);
        balls[i].m = (4.f / 3.f * PI) * balls[i].r * balls[i].r * balls[i].r * materials[mi].density;
        balls[i].yMod = materials[mi].yMod;
        balls[i].pRatio = materials[mi].pRatio;
        balls[i].color = materials[mi].color;
    }

    gravity = ofVec3f(0.f, GRAVITY_MAG, 0.f);
    attract = false;
    
    ballCollisionTable = new float[N_BALLS * N_BALLS];

    listenPos = ofVec3f(0.5f * (pMin.x + pMax.x), 0.5f * (pMin.y + pMax.y), BOX_ZMAX);

    ofSoundStreamSetup(CHANNELS, 0, AUDIO_SAMPLE_RATE, 256, 4);
    ofSetFrameRate(60);
}

void ofApp::exit() {
    delete[] ballCollisionTable;
}


enum WallId{ NONE = -1, XMIN = -2, XMAX = -3, YMIN = -4, YMAX = -5, ZMIN = -6, ZMAX = -7 };


// will return smaller root
static bool spheresCollide(const Sphere& ball1, const Sphere& ball2, float* t) {
    ofVec3f cDiff = ball1.p - ball2.p;
    ofVec3f vDiff = ball1.v - ball2.v;
    float rSum = ball1.r + ball2.r;
    float a = vDiff.lengthSquared();
    float b_over_2 = cDiff.dot(vDiff);
    float c = cDiff.lengthSquared() - rSum*rSum;
    float D_over_4 = b_over_2*b_over_2 - a*c;    
    if (D_over_4 < 0.f) {
        return false;
    }
    if (b_over_2 > 0.f) {
        float z = -b_over_2 - sqrtf(D_over_4);
        *t = z / a;
    } else {
        float z = -b_over_2 + sqrtf(D_over_4);
        *t = c / z;
    }
    return true;
}

// will update t to time of first wall collision, and update wallId to that wall
int ofApp::wallCollide(const Sphere& ball, float tMin, float* t) {
    *t = positiveInfinity;
    int id = NONE;
    if (ball.v.x > 0.f) {
        float tx = (pMax.x - ball.r - ball.p.x) / ball.v.x;
        if (tx >= tMin && tx < *t) {
            *t = tx;
            id = XMAX;
        }
    } else {
        float tx = (pMin.x + ball.r - ball.p.x) / ball.v.x;
        if (tx >= tMin && tx < *t) {
            *t = tx;
            id = XMIN;
        }
    }
    if (ball.v.y > 0.f) {
        float ty = (pMax.y - ball.r - ball.p.y) / ball.v.y;
        if (ty >= tMin && ty < *t) {
            *t = ty;
            id = YMAX;
        }
    } else {
        float ty = (pMin.y + ball.r - ball.p.y) / ball.v.y;
        if (ty >= tMin && ty < *t) {
            *t = ty;
            id = YMIN;
        }
    }
    if (ball.v.z > 0.f) {
        float tz = (pMax.z - ball.r - ball.p.z) / ball.v.z;
        if (tz >= tMin && tz < *t) {
            *t = tz;
            id = ZMAX;
        }
    } else {
        float tz = (pMin.z + ball.r - ball.p.z) / ball.v.z;
        if (tz >= tMin && tz < *t) {
            *t = tz;
            id = ZMIN;
        }
    }
    return id;
}

static float computeTau(float r1Inv, float m1Inv, float v1, float E1,
                        float r2Inv, float m2Inv, float v2, float E2, float V) {
    float r = 1.f / (r1Inv + r2Inv);
    float m = 1.f / (m1Inv + m2Inv);
    float E = 1.f / ((1 - v1*v1) / E1 + (1 - v2*v2) / E2);
    return 2.87f * pow((m*m / (r*E*E*V)), 0.2);
}

static float computeSConst(const Sphere& ball, const ofVec3f& listenPos, float tau, const ofVec3f& VDir, float J) {
    ofVec3f toListener = listenPos - ball.p;
    float dist = toListener.length();
    ofVec3f toListenerDir = toListener / dist;

    float pConst = 1.2f * ball.r * ball.r * ball.r * VDir.dot(toListener) / (2.f * 330.f * dist);
    float d2Vdt2Const = PI / (2.f * ball.m * tau) * abs(J);
    float SConst = -12.f / (tau * tau);

    float combinedConst = pConst * d2Vdt2Const * SConst;
    return combinedConst;
}

//--------------------------------------------------------------
void ofApp::update(){
    float dt = ofGetLastFrameTime();
    
    // update ball velocities with gravity and attractive force
    for (int i = 0; i < N_BALLS; i++) {
        balls[i].v += dt * gravity;
    }
    if (attract) {
        for (int i = 0; i < N_BALLS; i++) {
            ofVec3f toAttractPos = attractPos - balls[i].p;
            float dSq = toAttractPos.lengthSquared();
            ofVec3f accel = (MOUSE_CURSOR_MASS / dSq) * toAttractPos;    // falls off as R
            balls[i].v += dt * accel;
        }
    }

    // compute collision times between all object pairs
    for (int i = 0; i < N_BALLS; i++) {
        wallCollisionTable[i].id = wallCollide(balls[i], 0.f, &wallCollisionTable[i].t);
        for (int j = i + 1; j < N_BALLS; j++) {
            float t = -1.f;
            spheresCollide(balls[i], balls[j], &t);
            ballCollisionTable[i * N_BALLS + j] = t;
            //ballCollisionTable[j * N_BALLS + i] = t;
        }
    }
    

    const float vn_unattenuated = dt * 60000.f;
    const float vn_threshold = 3.f * dt * GRAVITY_MAG;

    float tAt = 0.f;
    while (true) {
        // find the ball with the nearest next collision (occurs after tAt)
        int ci = -1;
        Collision collision;
        collision.t = positiveInfinity;
        collision.id = NONE;
        for (int i = 0; i < N_BALLS; i++) {
            if (wallCollisionTable[i].t >= tAt && wallCollisionTable[i].t < collision.t) {
                ci = i;
                collision = wallCollisionTable[i];
            }
            for (int j = i + 1; j < N_BALLS; j++) {
                if (ballCollisionTable[i * N_BALLS + j] >= tAt && ballCollisionTable[i * N_BALLS + j] < collision.t) {
                    ci = i;
                    collision.t = ballCollisionTable[i * N_BALLS + j];
                    collision.id = j;
                }
            }
        }
        if (collision.t >= dt) {
            break;
        }
        assert(collision.t >= tAt);
        assert(collision.id != NONE);

        float tau;
        float SConst;
        if (collision.id < -1) {            // wall collision
            float vn;
            Sphere& cBall = balls[ci];
            ofVec3f vNext = cBall.v;
            switch (collision.id) {
            case XMIN:
            case XMAX:
                vNext.x *= -cBall.rFactor;
                vn = abs(cBall.v.x);
                break;
            case YMIN:
            case YMAX:
                vNext.y *= -cBall.rFactor;
                vn = abs(cBall.v.y);
                break;
            case ZMIN:
            case ZMAX:
                vNext.z *= -cBall.rFactor;
                vn = abs(cBall.v.z);
                break;
            }
            ofVec3f impulse = (vNext - cBall.v) * cBall.m;
            float J = impulse.length();
            ofVec3f VDir = impulse / J;

            cBall.p += collision.t * (cBall.v - vNext); // move it to contact point, then backstep in time
            cBall.v = vNext;

            // update collision tables
            updateBallCollisions(ci, collision.t);

            // compute tau, SConst
            tau = computeTau(1.f / cBall.r, 1.f / cBall.m, cBall.pRatio, cBall.yMod,
                             0.f, 0.f, materials[0].pRatio, materials[0].yMod, vn);
            SConst = computeSConst(cBall, listenPos, tau, VDir, J);

        } else {    //if (collision.id >= 0) {     // ball collision
            assert(ci != collision.id);

            int ci2 = collision.id;
            Sphere& cBall = balls[ci];
            Sphere& cBall2 = balls[ci2];

            ofVec3f p1 = cBall.p + collision.t * cBall.v;
            ofVec3f p2 = cBall2.p + collision.t * cBall2.v;
            ofVec3f n = (p1 - p2).normalized();

            float eps = 0.5f * (cBall.rFactor + cBall2.rFactor);

            float vn = (cBall2.v - cBall.v).dot(n);
            float J = (1.f + eps)*vn / (1.f / cBall.m + 1.f / cBall2.m);
            ofVec3f vNext = cBall.v + J / cBall.m * n;
            ofVec3f vNext2 = cBall2.v - J / cBall2.m * n;

            cBall.p += collision.t * (cBall.v - vNext);     // move to contact pt, then backstep
            cBall2.p += collision.t * (cBall2.v - vNext2);
            cBall.v = vNext;
            cBall2.v = vNext2;

            // update collision tables
            updateBallCollisions(ci, collision.t);
            updateBallCollisions(ci2, collision.t);

            // compute tau, SConst
            tau = computeTau(1.f / cBall.r, 1.f / cBall.m, cBall.pRatio, cBall.yMod,
                             1.f / cBall2.r, 1.f / cBall2.m, cBall2.pRatio, cBall2.yMod, abs(vn));
            float SConst1 = computeSConst(cBall, listenPos, tau, n, abs(J));
            float SConst2 = computeSConst(cBall2, listenPos, tau, -n, abs(J));
            SConst = SConst1 + SConst2;
        }
        
        SConst *= 0.0005f;

        // add audio samples to ring buffer
        int samplesStartAt = collision.t * (CHANNELS * AUDIO_SAMPLE_RATE);
        int samplesToAdd = tau * (CHANNELS * AUDIO_SAMPLE_RATE);
        int additionalCapcityNeeded = samplesStartAt + samplesToAdd - audioBuffer.size();
        if (additionalCapcityNeeded > 0) {
            int zerosPushed = audioBuffer.pushZeros(additionalCapcityNeeded);
            assert(zerosPushed == additionalCapcityNeeded);
        }

        float t = 0.f;
        audioBufferLock.lock();
        auto iter = audioBuffer.at(samplesStartAt);
        for (int i = 0; i < samplesToAdd / CHANNELS; i++) {
            float sample = SConst * (t - 0.5f * tau) * sin(PI*t / tau);
            for (int j = 0; j < CHANNELS; j++) {
                *iter += sample;
                ++iter;
            }
            t += 1.f / AUDIO_SAMPLE_RATE;
        }
        audioBufferLock.unlock();
                
        tAt = collision.t;
    }


    // update all ball positions to end of frame
    for (int i = 0; i < N_BALLS; i++) {
        balls[i].p += dt * balls[i].v;
    }
}

void ofApp::updateBallCollisions(int index, float tMin) {
    wallCollisionTable[index].id = wallCollide(balls[index], tMin, &wallCollisionTable[index].t);
    for (int i = 0; i < index; i++) {
        float t = -1.f;
        spheresCollide(balls[index], balls[i], &t);
        ballCollisionTable[i * N_BALLS + index] = t;
    }
    for (int j = index + 1; j < N_BALLS; j++) {
        float t = -1.f;
        spheresCollide(balls[index], balls[j], &t);
        ballCollisionTable[index * N_BALLS + j] = t;
    }
}

//--------------------------------------------------------------
void ofApp::draw(){
    ofBackground(0);

    ofEnableLighting();
    pointLight.enable();

    ofEnableDepthTest();
    
    ofSetColor(200, 200, 200);
    leftWall.draw();
    rightWall.draw();
    backWall.draw();
    topWall.draw();
    bottomWall.draw();

    // draw balls
    ofIcoSpherePrimitive sphere(0.f, 2);
    for (int i = 0; i < N_BALLS; i++) {
        sphere.setRadius(balls[i].r * PIXELS_PER_METER);
        sphere.setPosition(balls[i].p * PIXELS_PER_METER);
        ofSetColor(balls[i].color);
        sphere.draw();
    }

    ofDrawBitmapString(ofToString(ofGetFrameRate()) + "fps", 10, 15);
}

//--------------------------------------------------------------
void ofApp::audioOut(float* output, int bufferSize, int nChannels) {
    audioBufferLock.lock();
    int samplesPopped = audioBuffer.pop(output, bufferSize * CHANNELS);
    audioBufferLock.unlock();
    int samplesRemaining = CHANNELS * bufferSize - samplesPopped;
    if (samplesRemaining > 0) {
        memset(&output[samplesPopped], 0, samplesRemaining * sizeof(float));
    }
}

//--------------------------------------------------------------
void ofApp::keyPressed(int key){

}

//--------------------------------------------------------------
void ofApp::keyReleased(int key){
    switch (key) {
    case OF_KEY_LEFT:
        gravity = ofVec3f(-GRAVITY_MAG, 0.f, 0.f);
        break;
    case OF_KEY_RIGHT:
        gravity = ofVec3f(GRAVITY_MAG, 0.f, 0.f);
        break;
    case OF_KEY_UP:
        gravity = ofVec3f(0.f, -GRAVITY_MAG, 0.f);
        break;
    case OF_KEY_DOWN:
        gravity = ofVec3f(0.f, GRAVITY_MAG, 0.f);
        break;
    default:
        break;
    }
}

//--------------------------------------------------------------
void ofApp::mouseMoved(int x, int y ){

}

//--------------------------------------------------------------
void ofApp::mouseDragged(int x, int y, int button){
    attractPos = ofVec3f(x / PIXELS_PER_METER, y / PIXELS_PER_METER, 0.5f * (BOX_ZMIN + BOX_ZMAX));
}

//--------------------------------------------------------------
void ofApp::mousePressed(int x, int y, int button){
    attract = true;
    attractPos = ofVec3f(x / PIXELS_PER_METER, y / PIXELS_PER_METER, 0.5f * (BOX_ZMIN + BOX_ZMAX));
}

//--------------------------------------------------------------
void ofApp::mouseReleased(int x, int y, int button){
    attract = false;
}

//--------------------------------------------------------------
void ofApp::windowResized(int w, int h){
    ofSetupScreenPerspective(w, h, 60.f, BOX_ZMAX * PIXELS_PER_METER, BOX_ZMIN * PIXELS_PER_METER);

    pMin.x = 0.f;
    pMax.x = w / PIXELS_PER_METER;
    pMin.y = 0.f;
    pMax.y = h / PIXELS_PER_METER;
    pMin.z = BOX_ZMIN;
    pMax.z = BOX_ZMAX;

    for (int i = 0; i < N_BALLS; i++) {
        float r = balls[i].r;
        balls[i].p.x = std::max(std::min(balls[i].p.x, pMax.x - r), pMin.x + r);
        balls[i].p.y = std::max(std::min(balls[i].p.y, pMax.y - r), pMin.y + r);
        balls[i].p.z = std::max(std::min(balls[i].p.z, pMax.z - r), pMin.z + r);
    }


    pointLight.setPosition(w / 2, 10.f, 0.5f*(BOX_ZMIN + BOX_ZMAX)*PIXELS_PER_METER);

    // initialize walls

    leftWall = ofPlanePrimitive((BOX_ZMAX - BOX_ZMIN)*PIXELS_PER_METER, h, 8, 8);
    rightWall = leftWall;
    leftWall.setPosition(0.f, h / 2, 0.5f*(BOX_ZMIN + BOX_ZMAX)*PIXELS_PER_METER);
    leftWall.rotate(90.f, 0.f, 1.f, 0.f);
    rightWall.setPosition(w, h / 2, 0.5f*(BOX_ZMIN + BOX_ZMAX)*PIXELS_PER_METER);
    rightWall.rotate(-90.f, 0.f, 1.f, 0.f);

    backWall = ofPlanePrimitive(w, h, 8, 8);
    backWall.setPosition(w / 2, h / 2, BOX_ZMIN*PIXELS_PER_METER);

    topWall = ofPlanePrimitive(w, (BOX_ZMAX - BOX_ZMIN)*PIXELS_PER_METER, 8, 8);
    bottomWall = topWall;
    topWall.setPosition(w / 2, 0.f, 0.5f*(BOX_ZMIN + BOX_ZMAX)*PIXELS_PER_METER);
    topWall.rotate(-90.f, 1.f, 0.f, 0.f);
    bottomWall.setPosition(w / 2, h, 0.5f*(BOX_ZMIN + BOX_ZMAX)*PIXELS_PER_METER);
    bottomWall.rotate(90.f, 1.f, 0.f, 0.f);
}

//--------------------------------------------------------------
void ofApp::gotMessage(ofMessage msg){

}

//--------------------------------------------------------------
void ofApp::dragEvent(ofDragInfo dragInfo){ 

}
